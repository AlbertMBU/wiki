[
  {
    "objectID": "apuntes_helsinki/part2.html",
    "href": "apuntes_helsinki/part2.html",
    "title": "Apuntes Helsinki Parte 2",
    "section": "",
    "text": "El patrón de solución para las tareas de programación que involucran la lectura de la entrada del usuario es sencillo. Si el programa necesita leer del usuario, se crea una herramienta auxiliar de escáner para la tarea. El escáner se crea en el método principal después de la línea public static void main(String[] args) {.\nPara usar el escáner, debe estar disponible en el programa a través de la declaración import java.util.Scanner;, que viene antes de la definición de clase (public class …). La importación de la herramienta Escáner la hace disponible para su uso en el programa.\n// Making the scanner available in the program\nimport java.util.Scanner;\n\npublic class Program {\n    public static void main(String[] main) {\n        // Creating the scanner\n        Scanner reader = new Scanner(System.in);\n\n        // Examples of reading different types of user input\n        String text = reader.nextLine();\n        int number = Integer.valueOf(reader.nextLine());\n        double numberWithDecimals = Double.valueOf(reader.nextLine());\n        boolean trueOrFalse = Boolean.valueOf(reader.nextLine());\n\n    }\n}\n\n\n\nMuy a menudo necesitamos calcular algo en un programa, como un promedio o una suma. El patrón de solución para resolver tales problemas es el siguiente.\n\nDefina las entradas requeridas para el cálculo y declare variables para ellas. La entrada se refiere a los valores utilizados en el cálculo. Por lo general, puede identificar el tipo de entradas a partir de la descripción del problema.\n\nIdentifique la operación necesaria y declare una variable para el resultado del cálculo. Realice el cálculo utilizando las entradas y asigne el resultado a la variable que se reservó para ello. El tipo de resultado también se puede identificar normalmente a partir de la descripción del problema.\n\nUna vez hecho el cálculo, haz algo con su resultado. Esto puede significar imprimir el resultado de un cálculo o, por ejemplo, usarlo para calcular un promedio dividiendo la suma de las entradas por su cuenta.\n\nPor ejemplo, el patrón de solución para el problema Crear un programa para calcular la suma de dos números enteros es el siguiente.\n// Identifying the input values and declaring the variables for them\nint first = 1;\nint second = 2;\n\n// Identifying the operation and declaring a variable for the result\nint sum = first + second;\n\n// printing the result of the calculation\nSystem.out.println(\"The sum of \" + first + \" and \" + second + \" is \" + sum);\nUn programa que lee y calcula combina ambos patrones. Uno que calcula el producto de dos números enteros proporcionados por el usuario se ve así:\n// Making the scanner available in the program\nimport java.util.Scanner;\n\npublic class Program {\n    public static void main(String[] main) {\n        // Creating the scanner\n        Scanner reader = new Scanner(System.in);\n\n        // Identifying the input values and declaring the variables for them\n        int first = 1;\n        int second = 2;\n\n        // Assigning the user input to the variables\n        first = Integer.valueOf(reader.nextLine());\n        second = Integer.valueOf(reader.nextLine());\n\n        // Identifying the operation and declaring a variable for the result\n        int product = first * second;\n\n        // Printing the result of the operation\n        System.out.println(\"The product of \" + first + \" and \" + second + \" is \" + product);\n\n    }\n}"
  },
  {
    "objectID": "apuntes_helsinki/part1.html",
    "href": "apuntes_helsinki/part1.html",
    "title": "Apuntes Helsinki Parte 1",
    "section": "",
    "text": "Se escribe en código fuente\nConsta de sentencias y expresiones que se leen por línea de arriba a abajo y de izquierda a derecha.\nEj: para escribir en pantalla ‘hola mundo’ se debe usar el comando\nSystem.out.println() en el que el texto introducido entre paréntesis será el que mostrará\nSe debe finalizar la línea de comando con ;\nEn Java, nuestros programas deben incluir algún código repetitivo para funcionar. Este modelo, cuyo ejemplo se muestra a continuación, le dice a la computadora cómo se llama su programa. A continuación, el nombre del programa es Example. Este nombre tiene que corresponder al nombre del archivo que contiene el código fuente (por ejemplo, Example.java).\nLa ejecución del programa comienza desde la línea que sigue a public static void main(string[] args) {, y termina en el corchete de cierre }. Los comandos se ejecutan una línea a la vez.\nEn el ejemplo anterior, System.out.println(‘Text to printed’) es el único comando que se ejecutará. Su salida es:\nText to be printed\nEn el ejemplo el nombre del programa es Example este nombre corresponde al nombre del archivo que contiene el código fuente (Ej: Example.java)\nLa ejecución del programa empieza después de public static void main(sting[] args) { y termina en el corchete de cierre }\nYa que el programa se ejecuta línea por línea, cada vez que se le quiera dar una instrucción (aunque sea para que lo muestre en pantalla) se debe crear una línea de código cada vez y al finalizar esta línea añadir ; Ej:\neste comando arroja lo siguiente: Hello world! … and the universe!"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#strings-cadenas",
    "href": "apuntes_helsinki/part1.html#strings-cadenas",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Strings (cadenas)",
    "text": "Strings (cadenas)\nEl termino STRINGS (cadenas) es una abreviatura de cadena de caracteres\nHemos usado cadenas de dos maneras:\n\nAl practicar el comando de impresión, pasamos la cadena que se imprimirá al comando de impresión entre comillas, y\nal practicar la lectura de entrada, guardamos la cadena que leímos en una variable.\n\nEn la practica las variables son contenedores con nombre que contienen información de algún tipo especifico y tiene un nombre.\nUna variable de cadena se define indicando el tipo de variable (String) y su nombre (myString)\nA dicha variable también se le puede asignar un valor cuando se define. (Puedes asignar un valor siguiendo la declaración con signo igual seguido del valor y punto y coma)\nEj: un string variable llamada message a la que se le asigna el valor ‘Hola Mundo!’ se escribe así:\nString message = \"Hello world!\";\nCuando se crea una variable, se genera un contenedor especifico dentro del programa, cuyo contenido se puede consultar mas adelante. Las variables de referencian por su nombre. Por ejemplo, la creación e impresión de una variable String se realiza asi:\nString message = \"Hello world!\";\nSystem.out.println(message);\nY daría el resultado: “Hello world!”\nUn String entre comillas en programación se denomina “STRING LITERAL”, que define una variable (texto) literal, así que si ponemos comillas alrededor del string, este nos devuelve el texto añadido entre las comillas\nString message = \"Hello world!\";\nSystem.out.println(\"message\");\nEjemplo de salida:\nmessage\n\nConcatenar (unir Strings)\nEl string que se va a imprimir se puede crear a partir de varios strings utilizando +\nPor ejemplo:\npublic class Program {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello \" + \"world!\");\n    }\n}\nSe puede usar el mismo método para unir un string literal y una variable de string:\npublic class Program {\n\n    public static void main(String[] args) {\n        String message = \"Hello world!\";\n\n        System.out.println(message + \" ... and the universe!\");\n    }\n}\nQue daría como resultado:\nHello world!… and the universe!\nPodemos hacer lo mismo con cualquier número de strings:\npublic class Program {\n\n    public static void main(String[] args) {\n        String start = \"My name is \";\n        String end = \", James Bond\";\n\n        System.out.println(start + \"Bond\" + end);\n    }\n}\nQue dará como resultado:\nMy name is Bond, James Bond\n\n\nLeyendo Strings\nEl comando reader.nextLine(); lee la entrada de un usuario y devuelve un string. Si la queremos volver a usar en el programa debemos usar la variable — String message = scanner.nextLine(); El valor guardado en el string se puede usar tantas veces como se quiera. En el siguiente ejemplo la entrada del usuario se repite dos veces:\n//Introduce the Scanner tool used for reading\nimport java.util.Scanner;\n\npublic class Program {\n\n    public static void main(String[] args) {\n\n        //Create the tool for reading, assign it to variable caller \"scanner\n        Scanner scanner = new Scanner(System.in);\n\n        //Print user a message \"Write a message: \"\n        System.out.println(\"Write a message: \");\n\n        //Read the user's string input, save it to program memory\n        //\"String message = (user input)\"\n        String message = scanner.nextLine();\n\n        // Print the user input twice\n        System.out.println(message);\n        System.out.println(message);\n    }\n}\n\nEspera de una entrada\nCuando el programa ejecutado solicita una entrada del usuario con el comando (the command reader.nextLine()), la ejecución se para y espera a que el usuario escriba y presione enter."
  },
  {
    "objectID": "apuntes_helsinki/part1.html#crear-saltos-de-línea",
    "href": "apuntes_helsinki/part1.html#crear-saltos-de-línea",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Crear saltos de línea",
    "text": "Crear saltos de línea\nPara crear saltos de línea visuales en pantalla dentro del texto escrito en \"” se debe añadir \\n\nSi solo se desea ver el código en nuestro editor, para no tener que hacer scroll se puede usar la barra invertida: \\"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#variables",
    "href": "apuntes_helsinki/part1.html#variables",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Variables",
    "text": "Variables\nSe puede interpretar una variable como un contenedor en que se puede almacenar información. Hay varios tipos de variables: 1. Texto (String) 2. Números enteros (int) 3. Coma flotante-decimales (double) 4. Verdadero o falso (boolean)\nSe asigna un valor a la variable usando el símbolo igual =\nEj:\nint months = 12;\nEn el ejemplo anterior el valor 12 se le asigna a una variable entera denominada meses. Podría leerse como: a la variable meses se le asigna el valor 12\nEl valor de una variable se puede unir a una cadena usando el signo + como en el siguiente ejemplo:\nString text = \"contains text\";\nint wholeNumber = 123;\ndouble floatingPoint = 3.141592653;\nboolean trueOrFalse = true;\n\nSystem.out.println(\"Text variable: \" + text);\nSystem.out.println(\"Integer variable: \" + wholeNumber);\nSystem.out.println(\"Floating-point variable: \" + floatingPoint);\nSystem.out.println(\"Boolean: \" + trueOrFalse);\nDa la siguiente salida:\nText variable: contains text Integer variable: 123 Floating-point variable: 3.141592653 Boolean: true\nEl nombre de las variables no se puede repetir\nEn caso de que se repitieran 2 variables con el mismo nombre, siempre haría caso a la primera.\nLa variable siempre conservará el mismo valor hasta que se le asigne otro.\nSe puede cambiar el valor mediante la declaración que tenga el mismo nombre de la variable, un signo igual y el nuevo valor. (el tipo de variable solo se puede definir en la declaración inicial, a tener en cuenta que el tipo de variable solo se podrá definir cuando se crea la primera vez) Ej:\nint number = 123;\nSystem.out.println(\"The value of the variable is \" + number);\n\nnumber = 42;\nSystem.out.println(\"The value of the variable is \" + number);\nSalida ejemplo:\nThe value of the variable is 123 The value of the variable is 42\nVeamos paso a paso la ejecución del programa anterior. Cuando una variable aparece en el programa por primera vez, es decir, se le dice a la computadora tanto su tipo (en este caso, int) como su nombre (en este caso, número), la computadora crea un ‘contenedor con nombre’ para la variable. Luego, el valor del lado derecho del signo igual se copia en este contenedor con nombre.\n[[Pasted image 20221103134856.png]]\nCada vez que se hace referencia a una variable por su nombre en un programa - aquí, queremos imprimir la cadena “El valor de la variable es” seguido del valor de la variable numérica, su valor se recupera de un contenedor que tiene el nombre correspondiente.\n[[Pasted image 20230103122510.png]]\nCada vez que se asigna un valor a una variable (aquí el number = 42), se ejecuta una verificación para ver si ya existe un contenedor con el nombre dado. Si ya existe, se copia un nuevo valor en el lugar del valor anterior, y el valor anterior desaparece. Si no se encuentra un contenedor del nombre de la variable, la ejecución del programa finaliza con un mensaje de error o no se ejecuta.\n[[Pasted image 20230103122643.png]]\nLuego, se vuelve a hacer referencia a la variable por su nombre en el programa; nuevamente queremos imprimir la cadena ‘El valor de la variable es’ seguido del valor de la variable numérica. Procedemos normalmente, recuperando el valor de número de un contenedor que tiene su nombre.\n[[Pasted image 20230103122752.png]]\nAl final del programa, notará que el valor inicial de la variable ha sido eliminado . Una variable puede contener sólo un valor a la vez.\n\nTipos de variable persistentes\nUna vez se ha declarado el tipo de variable, ya no se puede cambiar. Por ejemplo, no se puede asignar un valor booleano a una variable tipo entero, ni se puede asignar un valor entero a una variable tipo booleana.\nSin embargo, existen excepciones: Se puede asignar un numero entero a una variable tipo doble, ya que Java sabe como convertir un numero entero a doble durante la asignación del valor.\ndouble floatingPoint = 0.42;\nfloatingPoint = 1; // FUNCIONA\n\nint value = 10;\nfloatingPoint = value; // TAMBIÉN FUNCIONA\nSin embargo no se puede asignar un valor decimal a una variable entera.\n\n\nNombrar Variables\nNombrar variables es un aspecto fundamental en la descripción de un programa. Veamos dos ejemplos.\ndouble a = 3.14;\ndouble b = 22.0;\ndouble c = a * b * b;\n\nSystem.out.println(c);\nSalida = 1519.76\ndouble pi = 3.14;\ndouble radius = 22.0;\ndouble surfaceArea = pi * radius * radius;\n\nSystem.out.println(surfaceArea);\nSalida = 1519.76\nℹ️ Las variables expresan el programa y el problema a resolver\nEs decir el nombre de las variables deben ayudar a comprender el problema y su resolución para futuras modificaciones o entender correctamente lo que se pretende conseguir.\nEl nombre de las variables está limitada por ciertas restricciones:\n\nNo puede contener símbolos especiales (@, !, #, etc).\nNo puede contener espacios (se utilizan para separar comandos)\nNo puede empezar por un numero, pero lo puede contener\nNo se puede llamar igual que las variables definidas por java o comandos de Java\n\nLas normas que usa el estilo Java se conoce como estilo camelCase. \nNota! La primera letra de la variable debe ser minúscula.\nLas variables informan de los valores que contienen:\nUna variable que contiene la cadena ‘texto’ se declara con la sentencia String string = ‘texto’; y un entero que tiene el valor 42 se declara con la sentencia int value = 42;\nEl tipo de una variable determina los tipos de valores que se le pueden asignar:\nTipo int: números enteros Tipo double: números con decimales Tipo booleano: valor verdadero/falso\n\n\n\n\n\n\n\n\nTipo\nEjemplo\nValores aceptados\n\n\n\n\nNumero Entero (int)\nint valor = 4;\nUn numero entero puede contener enteros con valor entre -2147483648 and 2147483647.\n\n\nNumero Decimal (double)\ndouble valor = 4.2;\nLos números de punto flotante contienen números decimales, siendo el mayor valor posible aproximadamente 2^1023\n\n\nString (Cadena texto)\nString texto = “Hola”;\nUn String puede contener texto Este debe estar entre \" \"\n\n\nVerdadero/Falso (booleano)\nboolean right = true;\nUn booleano contiene el valor verdadero o falso"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#reading-different-variable-types-from-user-leyendo-diferentes-variables-escritas-por-el-usuario",
    "href": "apuntes_helsinki/part1.html#reading-different-variable-types-from-user-leyendo-diferentes-variables-escritas-por-el-usuario",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Reading Different Variable Types from User (leyendo diferentes variables escritas por el usuario)",
    "text": "Reading Different Variable Types from User (leyendo diferentes variables escritas por el usuario)\nLa entrada del usuario siempre se lee como un string, ya que su el usuario escribe su entrada como texto.\nnextLine se usa para leer el string del usuario, es el comando que ayuda al Scanner.\nString text = scanner.nextLine();\nEl comando Integer.valueOf convierte un string en un entero.\nEl comando Double.valueOf convierte una cadena en un doble (número decimal). Toma como parámetro la cadena que contiene el valor a convertir\nEl comando Boolean.valueOf convierte una cadena en un booleano.\nimport java.util.Scanner;\n\npublic class Program {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String text = scanner.nextLine();\n        int integer = Integer.valueOf(scanner.nextLine());\n        double floatingPoint = Double.valueOf(scanner.nextLine());\n        boolean trueOrFalse = Boolean.valueOf(scanner.nextLine());\n\n        // and so on\n    }\n}"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#calculando-con-números",
    "href": "apuntes_helsinki/part1.html#calculando-con-números",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Calculando con números",
    "text": "Calculando con números\nlas funciones matemáticas funcionan igual que habitualmente.\nA tener en cuenta que las operaciones de MULTIPLICAR Y DIVIDIR se calculan antes que las de SUMAR Y RESTAR.\npuedes modificar el orden de las operaciones utilizando paréntesis, las operaciones entre paréntesis se realizaran antes que las que estan fuera de ellos\n\nESCRIBIR VALOR DE LAS VARIABLES\npara imprimir el valor de las variables en pantalla debe ir + variable\nEj:\nSystem.out.println( + first + \" * \" + second + \" = \"+ (first * second));\n\nSALIDA : 2 * 8 = 16 \nAl dividir, si se dividen 2 números enteros y el resultado es con decimales, dará como resultado un NUMERO ENTERO.\npara imprimir un resultado con decimales se deben convertir las variables y el resultado en decimal (double), en el caso de una de las variables sea con decimales esta convierte el resultado en decimal. Ej:\nint first = 3;\nint second = 2;\n\ndouble result1 = (double) first / second;\nSystem.out.println(result1); // prints 1.5\n\ndouble result2 = first / (double) second;\nSystem.out.println(result2); // prints 1.5\n\ndouble result3 = (double) (first / second);\nSystem.out.println(result3); // prints 1.0\nOtra opción es multiplicar una de las variables por un decimal antes de la operación\nint dividend = 3;\nint divisor = 2;\n\ndouble result = 1.0 * dividend / divisor;\nSystem.out.println(result); // imprime 1.5\n\n\nDeclaración condicional if\ntiene una condición al ejecutarse, se declara con la palabra if seguida de (). Después se define el condicional dentro de unos corchetes {}, los datos de los paréntesis se ejecutan si cumplen la opción verdadero.\nEj: nos devuelve la frase el número es mayor que 10, ya que el valor de la variable es 11\nint number = 11;\nif (number > 10) {\n    System.out.println(\"The number was greater than 10\");\n}\nEn caso de que la expresión condicional fuera verdadera, la ejecución del programa continua, en caso de que sea falso, el programa pasa a la siguiente a la siguiente declaración después del corchete. if no va seguida de ; ya que la declaración no termina después del condicional.\n\n\nSangría de código y sentencias de bloque\nCode Indentation\nUn bloque de código se refiere a una sección encerrada por un par de corchetes {}.\nEl archivo fuente contiene el programa y el string public class, seguido del nombre del programa. El bloque se cierra al finalizar con el corchete de cierre }\n[[Pasted image 20230117134639.png]]\nOjo una declaración condicional también marca el comienzo de un nuevo bloque de código\nEl código en Java tiene una sangría de cuatro espacios o una sola pestaña para cada bloque (se puede identar con Tabulador). Use espacios o tabulaciones para la sangría, no ambos. La sangría puede romperse en algunos casos si usa ambos al mismo tiempo. NetBeans lo ayudará con esto si presiona la combinación de teclas ‘alt + shift + f’ (macOS ‘control + shift + f’).\nIDENTADO AUTOMATICO EN NETBEANS ‘alt + shit +f’"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#comparison-operators-operadores",
    "href": "apuntes_helsinki/part1.html#comparison-operators-operadores",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Comparison Operators (Operadores)",
    "text": "Comparison Operators (Operadores)\n\n> mayor que\n>= mayor o igual que\n< menor que\n<= menor o igual que\n== igual que\n!= NO igual que"
  },
  {
    "objectID": "apuntes_helsinki/part1.html#else",
    "href": "apuntes_helsinki/part1.html#else",
    "title": "Apuntes Helsinki Parte 1",
    "section": "Else",
    "text": "Else\nSi la ejecución de if dentro de los paréntesis se evalúa como falsa, entonces la ejecución del código se mueve a la siguiente declaración del corchete de cierre.\nEsto no siempre se desea, si queremos crear una opción alternativa cuando esta sea falsa se usa el parámetro ELSE, este parámetro se usa siempre con IF\nint number = 4;\n\nif (number > 5) {\n    System.out.println(\"Your number is greater than five!\");\n} else {\n    System.out.println(\"Your number is five or less!\");\n}\n\n// valor de salida\n\nYour number is five or less!\nEl comando else se coloca en la misma línea que el paréntesis de cierre del bloque definido por el comando if.\n\nMás condicionales: else if\nEn el caso de múltiples condicionales, usamos el comando else if. El comando else if es como else, pero con una condición adicional. else if sigue la condición if, y pueden ser múltiples.\nint number = 3;\n\nif (number == 1) {\n    System.out.println(\"The number is one\");\n} else if (number == 2) {\n    System.out.println(\"The given number is two\");\n} else if (number == 3) {\n    System.out.println(\"The number must be three!\");\n} else {\n    System.out.println(\"Something else!\");\n}\n\n//SALIDA = \n\nThe number must be three!\nOJO Cuando cumple una de las condiciones deja de ejecutar los condicionales, aunque los posteriores son verdaderos\n\n\nExpresión de declaración condicional y la variable booleana\nEl valor que va entre paréntesis de la declaración condicional debe ser de tipo booleano después de la evaluación. Las variables de tipo booleano son verdaderas o falsas.\nboolean isItTrue = true;\nSystem.out.println(\"The value of the boolean variable is \" + isItTrue);\n\n// SALIDA: \n\nThe value of the boolean variable is true\nLa declaración condicional también se puede hacer de la siguiente manera:\nboolean isItTrue = true;\nif (isItTrue) {\n    System.out.println(\"Pretty wild!\");\n}\n\n//SALIDA:\n\nPretty wild!\nLos operadores de comparación también se pueden usar fuera de los condicionales. En esos casos, el valor booleano resultante de la comparación se almacena en una variable booleana para su uso posterior.\nint first = 1;\nint second = 3;\nboolean isGreater = first > second;\nEn el ejemplo anterior, la variable booleana isGreater ahora contiene el valor booleano falso. Podemos extender el ejemplo anterior agregándole una declaración condicional.\nint first = 1;\nint second = 3;\nboolean isLessThan = first < second;\n\nif (isLessThan) {\n    System.out.println(\"1 is less than 3!\");\n}\nEl operador módulo es un operador ligeramente menos utilizado, que es, sin embargo, muy útil cuando queremos comprobar la divisibilidad de un número, por ejemplo. El símbolo del operador módulo es %.\nint remainder = 7 % 2;\nSystem.out.println(remainder); // prints 1\nSystem.out.println(5 % 3); // prints 2\nSystem.out.println(7 % 4); // prints 3\nSystem.out.println(8 % 4); // prints 0\nSystem.out.println(1 % 2); // prints 1\n\n\nDeclaraciones condicionales y cadenas de comparación (Comparing String)\npara comparar variables tipo integers, floating point numbers, y booleanos podemos usar dos símbolos igual (variable1 == variable2), pero no podemos comparar así las variables string.\nPara compara strings debemos usar el comando equals\nEj:\nScanner reader = new Scanner(System.in);\n\nSystem.out.println(\"Enter a string\");\nString input = reader.nextLine();\n\nif (input.equals(\"a string\")) {\n    System.out.println(\"Great! You read the instructions correctly.\");\n} else {\n    System.out.println(\"Missed the mark!\");\n}\n/*SALIDA 1:\n\nEnter a string \nok!\nMissed the mark!\n\nSALIDA 2:\n\nEnter a string \na string\nGreat! You read the instructions correctly.\nEl comando equals se escribe después de una cadena al adjuntarlo a la cadena para compararlo con un punto. El comando recibe un parámetro, que es la cadena con la que se comparará la variable. Si la variable de cadena se compara directamente con una cadena, entonces la cadena se puede colocar entre paréntesis del comando igual entre comillas. De lo contrario, el nombre de la variable de cadena que contiene la cadena que se va a comparar se coloca entre paréntesis.\nEn el siguiente ejemplo, se solicita al usuario dos cadenas. Primero comprobamos si las cadenas proporcionadas son las mismas, después de lo cual comprobaremos si el valor de cualquiera de las dos cadenas es ‘dos cadenas’.\nScanner reader = new Scanner(System.in);\n\nSystem.out.println(\"Input two strings\");\nString first = reader.nextLine();\nString second = reader.nextLine();\n\nif (first.equals(second)) {\n    System.out.println(\"The strings were the same!\");\n} else {\n    System.out.println(\"The strings were different!\");\n}\n\nif (first.equals(\"two strings\")) {\n    System.out.println(\"Clever!\");\n}\n\nif (second.equals(\"two strings\")) {\n    System.out.println(\"Sneaky!\");\n}\n\n/*SALIDA 1:\nInput two strings \n**hello** \n**world** \nThe strings were different!\n\nSALIDA 2:\n\nInput two strings \n**two strings** \n**world** \nThe strings were different! Clever!\n\nSALIDA 3:\nInput two strings \n**same** \n**same** \nThe strings were the same!\n\n*/\n\n\nOperadores Lógicos (Logical Operators)\n&& and (y) || or (ó) ! not (no)\nEn función de la combinación de las expresiones dará un resultado u otro dependiendo del operador.\n\nTABLAS DE VERDAD\n[[Pasted image 20230118115733.png]]\n[[Pasted image 20230118115835.png]]\nEj: En el siguiente ejemplo, combinamos dos condiciones individuales usando &&, es decir, el operador and. El código se usa para verificar si el número en la variable es mayor o igual a 5 y menor o igual a 10. En otras palabras, si está dentro del rango de 5-10:\nSystem.out.println(\"Is the number within the range 5-10: \");\nint number = 7;\n\nif (number >= 5 && number <= 10) {\n    System.out.println(\"It is! :)\");\n} else {\n    System.out.println(\"It is not :(\")\n}\n\n//SALIDA:\n\nIs the number within the range 5-10: \nIt is! :)\nEn el siguiente proporcionamos dos condiciones usando ||, es decir, el operador or: es el número menor que cero o mayor que 100. La condición se cumple si el número cumple cualquiera de las dos condiciones:\nSystem.out.println(\"Is the number less than 0 or greater than 100\");\nint number = 145;\n\nif (number < 0 || number > 100) {\n    System.out.println(\"It is! :)\");\n} else {\n    System.out.println(\"It is not :(\")\n}\n\n/*SALIDA:\nIs the number less than 0 or greater than 100 \nIt is! :)\n*/\nEn este ejemplo, volteamos el resultado de la expresión number > 4 usando !, es decir, el operador NOT. El operador NOT se escribe de tal manera que la expresión que se va a voltear se encierra entre paréntesis y el operador NOT se coloca antes de los paréntesis.\nint number = 7;\n\nif (!(number > 4)) {\n    System.out.println(\"The number is not greater than 4.\");\n} else {\n    System.out.println(\"The number is greater than 4.\")\n}\n\n/*SALIDA:\n\nThe number is greater than 4.\n*/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "wiki",
    "section": "",
    "text": "!HEllo world!!\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nHola, esta mi carta de presentación para el curso de Quarto. Espero que les guste."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]